// Extends

@use "./mixins";
@use "./utils";
@use "./vars";

// ============================================================================

// Limiting container

%container {
  // Responsive
  @if vars.$adaptiveType == 1 {
    @if vars.$maxWidthContainer > 0 {
      max-width: utils.rem(vars.$containerWidth);
      margin: 0 auto;

      @media (min-width: vars.$desktopMedium) {
        max-width: utils.rem(vars.$containerDesktopWidth);
      }
    }

    @if vars.$containerPadding > 0 {
      @if vars.$maxWidthContainer > 0 {
        padding-right: utils.rem(calc(vars.$containerPadding / 2));
        padding-left: utils.rem(calc(vars.$containerPadding / 2));

        @media (min-width: vars.$desktopMedium) {
          padding-right: utils.rem(calc(vars.$containerDesktopPadding / 2));
          padding-left: utils.rem(calc(vars.$containerDesktopPadding / 2));
        }
      } @else {
        @include mixins.responsiveValue(
          padding-right,
          calc(vars.$containerPadding / 2),
          15
        );
        @include mixins.responsiveValue(
          padding-left,
          calc(vars.$containerPadding / 2),
          15
        );

        @media (min-width: vars.$desktopMedium) {
          @include mixins.responsiveValue(
            padding-right,
            calc(vars.$containerDesktopPadding / 2),
            15
          );
          @include mixins.responsiveValue(
            padding-left,
            calc(vars.$containerDesktopPadding / 2),
            15
          );
        }
      }
    }
  }
  // According to breakpoints
  @else {
    margin: 0 auto;

    @if vars.$maxWidthContainer > 0 {
      max-width: utils.rem(vars.$containerWidth);

      @media (min-width: vars.$desktopMedium) {
        max-width: utils.rem(vars.$containerDesktopWidth);
      }
    } @else {
      @if vars.$containerPadding > 0 {
        padding-right: utils.rem(calc(vars.$containerPadding / 2));
        padding-left: utils.rem(calc(vars.$containerPadding / 2));

        @media (min-width: vars.$desktopMedium) {
          padding-right: utils.rem(calc(vars.$containerDesktopPadding / 2));
          padding-left: utils.rem(calc(vars.$containerDesktopPadding / 2));
        }
      }
    }

    @media (max-width: vars.$desktopMedium) {
      max-width: utils.rem(970);
    }

    @media (max-width: vars.$tablet) {
      max-width: utils.rem(750);
    }

    @media (max-width: vars.$mobile) {
      max-width: none;
    }

    @if vars.$containerPadding > 0 and vars.$maxWidthContainer > 0 {
      padding-right: utils.rem(calc(vars.$containerPadding / 2));
      padding-left: utils.rem(calc(vars.$containerPadding / 2));

      @media (min-width: vars.$desktopMedium) {
        padding-right: utils.rem(calc(vars.$containerDesktopPadding / 2));
        padding-left: utils.rem(calc(vars.$containerDesktopPadding / 2));
      }
    }
  }
}

%btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding-block: utils.em(12, 16);
  padding-inline: utils.em(16, 16);
  font-size: utils.rem(16);
  font-weight: 500;
  color: var(--mainBgColor);
  background: var(--mainColor);
  border: utils.em(2, 16) solid var(--mainColor);
  border-radius: utils.em(5, 16);
  transition: color 0.3s ease 0s, background 0.3s ease 0s;
}

%btn_hover {
  &:hover,
  &:focus-visible {
    color: var(--mainBgColor);
    background: transparent;
  }
}

%btn_active {
  color: var(--mainColor);
  background: transparent;
}

%table {
  border-radius: utils.rem(4);

  thead {
    tr {
      background: var(--cardBg);
    }
  }

  tbody {
    tr {
      &:nth-child(odd) {
        background: var(--cardBorder);
      }

      &:nth-child(even) {
        background: var(--cardBg);
      }
    }
  }

  td {
    padding-block: utils.rem(16);
    padding-inline: utils.rem(20);
  }
}

%table_reverse {
  thead {
    tr {
      background: var(--cardBorder);
    }
  }

  tbody {
    tr {
      &:nth-child(odd) {
        background: var(--cardBg);
      }

      &:nth-child(even) {
        background: var(--cardBorder);
      }
    }
  }
}
